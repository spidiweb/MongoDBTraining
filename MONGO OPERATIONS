mongod

mongo

show dbs

use <DBNAME>

show collections

db.help()

db.collectionName.findOne();--return 1 record

db.collectionName.find();--Show all records

db.collectionName.find({"name":"Aman"})

db.collectionName.help()


db.employee.update({"empid":1001},{"$set":{"name":"Happy",designation:"Intern"}});--updates only 1 record even if there are 2 records which satisfies the conditions.

to update all the matching records:

db.employee.update({"empid":1001},{"$set":{"name":"Happy",designation:"Intern"}},{multi:true});

db.employee.update({"empd":1003},{"$set":{"name":"Aman","designation":"Intern"}},{"upsert":true})


db.employee.remove({"empd":1002})

db.employee.remove({"empd":1002},{"justOne":true});


db.find({},{"designation":1})


db.employee.insert({"empd":1005, "name":"Hello","designation":"Developer", "address":{"location":"Hinjawadi",city:"Pune"}})

db.employee.insert({"empd":1006, "name":"Aman","designation":"Developer", "address":{"location":"Hebbal",city:"Bangalore"}})


db.employee.find({empd:{$gte : 1002}})

db.employee.find({empd:{$in : [1001,1002]}})

db.employee.find({empd:{$in : [100,1002]}})

db.employee.update({},{"$set":{"address":{"location":"Viman Nagar","city":"Pune"}}},{"upsert":true,multi:true})

db.employee.find({"address.city":"Pune"});

db.employee.find({},{"empd":1, "name":1, "designation":1, "address.city":1})


$gt, $gte, $lt, $lte, $ne->not equal to , $nin-> not in, $size-> length of array.




db.employee.update({},{"$set":{"age":27}},{multi:true})

db.employee.update({},{"$inc":{age:29}})

db.employee.update({EMPD:1007},{"$unset":{age:""}},{"upsert":true,multi:true})


db.employee.insert({name:'Mike',empd:1011, designation:'ceo', addresses:[]})

db.employee.update({EMPD:1011},{"$push":{addresses:{location:'Koh-E-Fiza', city:"Bhopal"}}},{"upsert":true,multi:true})



db.employee.update({EMPD:1011},{"$addToSet":{addresses:{location:'Koh-E-Fiza', city:"Bhopal"}}},{"upsert":true,multi:true})



db.employee.find({"$or":[{"designation":"Developer"},{"address.city":"Pune"}]},{"empd":1, name:1, designation:1, "address.city":1})

db.employee.find({"$and":[{"designation":"Developer"},{"address.city":"Pune"}]},{"empd":1, name:1, designation:1, "address.city":1})

db.employee.find().sort({"address.city":1, "address.location":-1});

var records = db.employee.find().sort({"address.city":1, "address.location":1});records.forEach((row)=>{ print(row)})



var records = db.employee.find({});

records.forEach((row)=>{
	if(row.address && !row.address.length)
	{
		let add = row.address;
		
		row.address = [];
		
		row.address.push(add);
	}
	db.employee.save(row);
})


var records = db.employee.find({});

records.forEach((row)=>{
	if(row.address && !row.address.length)
	{
		let add = row.address;
		
		row.address = [];
		
		row.address.push(add);
	}
	db.employee.save(row);
})



db.authors.insert({
	"comments":[
	{"author":"Ritchie", "votes":10},
	{"author":"David", "votes":6},
	{"author":"Ritchie", "votes":5}
	]
});


db.authors.update( 
	{"comments.author":"Ritchie"}, 
	{"$inc":{"comments.0.votes":1}} 
)



db.fruits.insert({apple:5, orange:10});

db.fruits.insert({apple:5, orange:6});
db.fruits.insert({apple:5, orange:4});
db.fruits.insert({apple:5, orange:5});
db.fruits.insert({apple:2, orange:2});


db.fruits.find({"$where":function(){ if(this.apple === this.orange) return true; else return false; }});


db.Student.aggregate([{"$match":{Student_Name:"Kalki"}},{"$unwind":"$Subject"}])



db.Student.aggregate(
	[
		{"$match":{Student_Name:"Kalki"}}
		,{"$unwind":"$Subject"}
		,{
			"$group":{
				"_id":{"Student_Name":"$Student_Name"}
				,"Total_Marks":{"$sum":"$Mark_Scored"}
			}
		}
	]
)




db.Student.aggregate([{"$unwind":"$Subject"},{"$group":{"_id":{"student_name":"$Student_Name"},"Total_Marks":{"$sum":"$Mark_Scored"}}},{"$project":{"_id":0,"student_Name1":"$_id.student_name","total":"$Total_Marks"}},{"$sort":{"total":-1}}])



db.Student.aggregate([{
	"$unwind": "$Subject"
}, {
	"$sort": {
		"Mark_Scored": -1
	}
}, {
	"$group": {
		"_id": {
			"name": "$Student_Name"
		},
		"Top scored subject": {
			"$first": "$Mark_Scored"
		}
	}
}])


db.airports.createIndex({"loc":"2dsphere"})
db.states.createIndex({"loc":"2dsphere"})

var california = db.states.findOne({"code":"CA"});

db.airports.find({"loc":{"$geoWithin":{"$geometry":california.loc}}},{"name":1,type:1});




//on primary
rs.initiate();
rs.add("localhost:27018")
rs.add("localhost:27019")
rs.isMaster()
rs.status()


//on secondry
rs.slaveOk()

//on primary
use replicateDb
db.student.insert({rollno:101, name:"Arun"});


db.createCollection("contactdetails",{
 "validator":{
 "$jsonSchema":{
 "bsonType":"object",
 "required":["phone","email"],
 "properties":{
 "phone":{
         "bsonType":"string",
          "description":"mobile number"
 },
 "email":{
        "bsonType":"string",
        "description":"official mail id"
 }}}}})
 
 
 db.contactdetails.insert({})
 
 db.contactdetails.insert({x:1,phone:'1234567890',email:'aj59848'})
